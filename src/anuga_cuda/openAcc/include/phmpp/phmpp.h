/*
 * Copyright (C) 2008-2013 CAPS entreprise.  All Rights Reserved.
 * 
 * The source code contained or described herein and all documents  related
 * to the source code ("Material") are owned  by  CAPS  entreprise  or  its
 * suppliers or licensors.
 * 
 * Title to the Material remains with CAPS entreprise or its suppliers  and
 * licensors.  The Material contains trade secrets and proprietary and con-
 * fidential information of CAPS entreprise or its suppliers and licensors.
 * 
 * The Material is protected by the French intellectual property code,  in-
 * tellectual property laws and international treaties.  No part of the Ma-
 * terial may be used, copied, reproduced, modified,  published,  uploaded,
 * posted, transmitted, distributed or disclosed in any  way  without  CAPS
 * entreprise's prior express written permission.
 * 
 * No license under any patent, copyright, trade secret or other  intellec-
 * tual property right is granted to or conferred upon you by disclosure or
 * delivery of the Material, either expressly, by implication,  inducement,
 * estoppel or otherwise.
 * 
 * Any license under such intellectual property rights  must  be  expressed
 * and approved by CAPS entreprise in writing.
 */
#ifndef PHMPP_H
#define PHMPP_H
#include <stddef.h>

#ifdef PHMPP_API
#  undef PHMPP_API
#endif /* PHMPP_API */

#ifdef _WIN32
#  ifdef PHMPP_BUILD
#    define PHMPP_API __declspec(dllexport)
#  else /* ! PHMPP_BUILD */
#    define PHMPP_API __declspec(dllimport)
#  endif /* PHMPP_BUILD */
#else /* ! _WIN32 */
#  define PHMPP_API
#endif /* _WIN32 */

#ifdef __cplusplus
extern "C"
{
#endif

  /* Gives the version of the library. Should return PHMPP_VERSION. */
  PHMPP_API
  int phmpp_get_version(void);

  typedef enum phmpp_error_t {
    PHMPP_OK = 0,
    PHMPP_ERR_NO_DESCRIPTOR,
    PHMPP_ERR_NO_PROPERTY_ID,
    PHMPP_ERR_NO_VALUE_PTR,
    PHMPP_ERR_NO_VALUE_SIZE_PTR,
    PHMPP_ERR_NO_PROPERTY,
    PHMPP_ERR_NO_CODE,
    PHMPP_ERR_NO_HARDWARE,
    PHMPP_ERR_NO_CONTEXT,
    PHMPP_ERR_UNKNOWN_EVENT,
    PHMPP_ERR_NOMORE
  } phmpp_error_t;

  const char * phmpp_get_error_message(phmpp_error_t error);

  /* ------------------------------------------------------------------------------- */
  /* -------------------                Opaque Types            -------------------- */
  /* ------------------------------------------------------------------------------- */

#ifndef PHMPP_IMPL

  /* Information about the location of an event in the source code. */
  typedef void * phmpp_code_t;

  /* Information about the hardware which has produced the event. */
  typedef void * phmpp_hardware_t;

  /* Information about the context where the event occur. */
  typedef void * phmpp_context_t;

  /* Event generated by the HMPP runtime. */
  typedef void * phmpp_event_t;

#endif


  /* ------------------------------------------------------------------------------- */
  /* -------------------                SW Location             -------------------- */
  /* ------------------------------------------------------------------------------- */

  /* Gives the file name or sets the error flag. */
  PHMPP_API
  const char * phmpp_get_code_file_name(phmpp_code_t * code, phmpp_error_t * error);

  /* Gives the line number or sets the error flag. */
  PHMPP_API
  int phmpp_get_code_line_number(phmpp_code_t * code, phmpp_error_t * error);

  typedef enum phmpp_code_property_types_t {
    PHMPP_GROUPLET_LABEL  = 1001,
    PHMPP_CODELET_LABEL   = 1002,
    PHMPP_ARG_LABEL       = 1003,
    PHMPP_END_LINE_NUMBER = 1004,
    PHMPP_MIRROR_ID       = 1005
  } phmpp_code_property_types;

  /* Gives the code property by name or sets    the error flag. */
  PHMPP_API
  void phmpp_get_code_property(phmpp_code_t *                   code,
                               phmpp_code_property_types        property_id,
                               size_t                           property_value_size,
                               void *                           property_value,
                               size_t *                         property_value_size_ret,
                               phmpp_error_t *                  error);

  /* ------------------------------------------------------------------------------- */
  /* -------------------                HW Location             -------------------- */
  /* ------------------------------------------------------------------------------- */

  /* Gives the harware name or sets the error flag. */
  PHMPP_API
  const char * phmpp_get_hardware_name(phmpp_hardware_t * hardware, phmpp_error_t * error);

  /* Returns the mask making the difference between a host and an accelerator. */
  PHMPP_API
  int phmpp_get_accelerator_mask(phmpp_hardware_t * hardware);

  typedef enum phmpp_hardware_property_types_t {
    PHMPP_NODE_ID = 2001,
    PHMPP_SOCKET_ID = 2002,
    PHMPP_CORE_ID = 2003,
    PHMPP_HARDWARE_DESCRIPTION = 2004
  } phmpp_hardware_property_types;

  /* Gives the hardware property by name or sets the     error flag. */
  PHMPP_API
  void phmpp_get_hardware_property(phmpp_hardware_t    *                hardware,
                                   phmpp_hardware_property_types        property_id,
                                   size_t                               property_value_size,
                                   void                *                property_value,
                                   size_t              *                property_value_size_ret,
                                   phmpp_error_t   *                error);

  /* Gives the parent hardware, may be NULL. */
  PHMPP_API
  phmpp_hardware_t * phmpp_get_parent_hardware(phmpp_hardware_t * hardware);

  /* Gives the first child hardware, may be NULL. */
  PHMPP_API
  phmpp_hardware_t * phmpp_get_first_child_hardware(phmpp_hardware_t * hardware);

  /* Gives the next sibling hardware, may be NULL. */
  PHMPP_API
  phmpp_hardware_t * phmpp_get_next_sibling_hardware(phmpp_hardware_t * hardware);

  /* ------------------------------------------------------------------------------- */
  /* -------------------                RT Context              -------------------- */
  /* ------------------------------------------------------------------------------- */

  /* Gives the context name or sets the error flag. */
  PHMPP_API
  const char * phmpp_get_context_name(phmpp_context_t * context, phmpp_error_t * error);

  typedef enum phmpp_context_property_types_t {
    PHMPP_THREAD_ID = 3001,
    PHMPP_PROCESS_ID = 3002,
    PHMPP_SIZE = 3003
  } phmpp_context_property_types;

  /* Gives the context property by name or sets the error flag. */
  PHMPP_API
  void phmpp_get_context_property(phmpp_context_t *                     context,
                                  phmpp_context_property_types          property_id,
                                  size_t                                property_value_size,
                                  void                *                 property_value,
                                  size_t              *                 property_value_size_ret,
                                  phmpp_error_t   *                 error);

  /* Gives the parent context, may be NULL. */
  PHMPP_API
  phmpp_context_t * phmpp_get_parent_context(phmpp_context_t * context);

  /* Gives the first child context, may be NULL. */
  PHMPP_API
  phmpp_context_t * phmpp_get_first_child_context(phmpp_context_t * context);

  /* Gives the next sibling context, may be NULL. */
  PHMPP_API
  phmpp_context_t * phmpp_get_next_sibling_context(phmpp_context_t * context);

  /* ------------------------------------------------------------------------------- */
  /* -------------------        Event Description               -------------------- */
  /* ------------------------------------------------------------------------------- */

  typedef enum phmpp_event_kind_t {
    PHMPP_EK_UNDEFINED,
    PHMPP_EK_ACCELERATOR_REQUEST,
    PHMPP_EK_OBJECT_REQUEST,
    PHMPP_EK_CODELET_REQUEST,
    PHMPP_EK_TRANSFER_REQUEST,
    PHMPP_EK_SYSTEM_REQUEST,
    PHMPP_EK_NOMORE
  } phmpp_event_kind_t;

  typedef enum phmpp_event_state_t {
    PHMPP_STATE_UNDEFINED,
    PHMPP_START,
    PHMPP_STOP,
    PHMPP_WAIT,
    PHMPP_STATE_NOMORE
  } phmpp_event_state_t;

  /* Gives the kind of the event or sets the error flag. */
  PHMPP_API
  phmpp_event_kind_t phmpp_get_event_kind(phmpp_event_t * event, phmpp_error_t * error);

  /* Gives the state of the event or sets the error flag. */
  PHMPP_API
  phmpp_event_state_t phmpp_get_event_state(phmpp_event_t * event, phmpp_error_t * error);

  /* Gives the instance id of the event or sets the error flag. */
  PHMPP_API
  unsigned int phmpp_get_event_instance_id(phmpp_event_t * event, phmpp_error_t * error);

  /* Gives the semantic id of the event or sets the error flag. */
  PHMPP_API
  unsigned int phmpp_get_event_semantic_id(phmpp_event_t * event, phmpp_error_t * error);

  typedef enum phmpp_event_property_types_t {
    PHMPP_EVENT_NAME = 4001,
    PHMPP_EVENT_DESCRIPTION = 4002,
    PHMPP_EVENT_SEMANTIC_NAME = 4003,
    PHMPP_EVENT_SEMANTIC_DESCRIPTION = 4004,
    PHMPP_EVENT_VALUE = 4005
  } phmpp_event_property_types;

  /* Gives the event property by name or sets the error flag. */
  PHMPP_API
  void phmpp_get_event_property(phmpp_event_t *                 event,
                                phmpp_event_property_types      property_id,
                                size_t                          property_value_size,
                                void               *            property_value,
                                size_t             *            property_value_size_ret,
                                phmpp_error_t      *            error);

  /* Gives the code location of the event. */
  PHMPP_API
  phmpp_code_t * phmpp_get_event_code(phmpp_event_t * event);

  /* Gives the harware origin of the event. */
  PHMPP_API
  phmpp_hardware_t *phmpp_get_event_hardware(phmpp_event_t * event);

  /* Gives the execution context of the event. */
  PHMPP_API
  phmpp_context_t *phmpp_get_event_context(phmpp_event_t * event);

  /* Gives the string value of the given event state. */
  PHMPP_API
  const char * phmpp_get_event_state_name(phmpp_event_state_t state);

  /* ------------------------------------------------------------------------------- */
  /* -------------------                Call-backs              -------------------- */
  /* ------------------------------------------------------------------------------- */

  /* Event callback function. */
  typedef void phmpp_event_callback_t(phmpp_event_t * event);

  /* Registers the event callback function. */
  PHMPP_API
  void phmpp_register_event_callback(phmpp_event_kind_t kind, phmpp_event_callback_t * callback);

  /* Unregisters the event callback function. */
  PHMPP_API
  void phmpp_unregister_event_callback(phmpp_event_kind_t kind, phmpp_event_callback_t * callback);

  /* Prologue callback function. */
  typedef void phmpp_prologue_callback_t(void);

  /* Registers the prologue callback function. */
  PHMPP_API
  void phmpp_register_prologue_callback(phmpp_prologue_callback_t * callback);

  /* Unregisters the prologue callback function. */
  PHMPP_API
  void phmpp_unregister_prologue_callback(phmpp_prologue_callback_t * callback);

  /* Epilogue callback function. */
  typedef void phmpp_epilogue_callback_t(void);

  /* Registers the epilogue callback function. */
  PHMPP_API
  void phmpp_register_epilogue_callback(phmpp_epilogue_callback_t * callback);

  /* Unregisters the epilogue callback function. */
  PHMPP_API
  void phmpp_unregister_epilogue_callback(phmpp_epilogue_callback_t * callback);

#ifdef __cplusplus
}
#endif

#endif //PHMPP_H

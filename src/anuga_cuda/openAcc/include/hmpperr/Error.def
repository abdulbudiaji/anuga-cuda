/*
 * Copyright (C) 2008-2013 CAPS entreprise.  All Rights Reserved.
 * 
 * The source code contained or described herein and all documents  related
 * to the source code ("Material") are owned  by  CAPS  entreprise  or  its
 * suppliers or licensors.
 * 
 * Title to the Material remains with CAPS entreprise or its suppliers  and
 * licensors.  The Material contains trade secrets and proprietary and con-
 * fidential information of CAPS entreprise or its suppliers and licensors.
 * 
 * The Material is protected by the French intellectual property code,  in-
 * tellectual property laws and international treaties.  No part of the Ma-
 * terial may be used, copied, reproduced, modified,  published,  uploaded,
 * posted, transmitted, distributed or disclosed in any  way  without  CAPS
 * entreprise's prior express written permission.
 * 
 * No license under any patent, copyright, trade secret or other  intellec-
 * tual property right is granted to or conferred upon you by disclosure or
 * delivery of the Material, either expressly, by implication,  inducement,
 * estoppel or otherwise.
 * 
 * Any license under such intellectual property rights  must  be  expressed
 * and approved by CAPS entreprise in writing.
 */
// 3 parameters:
//   - An name used in C++ to construct the class name
//   - A name used to name the C enum and Fortran PARAMETERs
//   - A unique integer value for the C enum and the Fortran PARAMETERs
//
// All values should be different.
//
// The value 0 is reserved to indicate success

HMPP_ERROR_DEF(FatalError		    , FATAL			    ,  1)
HMPP_ERROR_DEF(OSError			    , SYSTEM		    ,  2)
HMPP_ERROR_DEF(IOError			    , IO			    ,  3)
HMPP_ERROR_DEF(LibraryError		    , LIBRARY		    ,  4)
HMPP_ERROR_DEF(LookupError		    , LOOKUP		    ,  5)
HMPP_ERROR_DEF(NotImplementedError	, NOT_IMPLEMENTED	,  6)
HMPP_ERROR_DEF(ValueError		    , VALUE			    ,  7)
HMPP_ERROR_DEF(DeviceError		    , DEVICE		    ,  8)
HMPP_ERROR_DEF(IndexError		    , INDEX			    ,  9)
HMPP_ERROR_DEF(KeyError			    , KEY			    , 10)
HMPP_ERROR_DEF(DatasetError		    , DATASET		    , 11)
HMPP_ERROR_DEF(SerializationError	, SERIALIZATION	    , 12)
HMPP_ERROR_DEF(ParserError		    , PARSER		    , 13)
HMPP_ERROR_DEF(ContextError		    , CONTEXT		    , 14)
HMPP_ERROR_DEF(TypeError		    , TYPE			    , 15)
HMPP_ERROR_DEF(LockFailError		, LOCKFAIL		    , 16)
HMPP_ERROR_DEF(AssertionError		, ASSERTION		    , 17)
HMPP_ERROR_DEF(OptionError          , OPTION            , 18)
HMPP_ERROR_DEF(LicenseError         , LICENSE           , 19)
HMPP_ERROR_DEF(BeloogaChildError    , BELOOGA_CHILD     , 20)
HMPP_ERROR_DEF(HarpunAssertionError , HARPUN_ASSERT     , 21)
HMPP_ERROR_DEF(ProfileError         , PROFILE           , 22)
HMPP_ERROR_DEF(DatabaseError		, DATABASE		    , 23)
HMPP_ERROR_DEF(CompilationError     , COMPILATION       , 24)
HMPP_ERROR_DEF(RuntimeError         , RUNTIME           , 25)   // Raised by ~raise_error DPIL intrinsic

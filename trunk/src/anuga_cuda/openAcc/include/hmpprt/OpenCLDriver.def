/*
 * Copyright (C) 2008-2013 CAPS entreprise.  All Rights Reserved.
 * 
 * The source code contained or described herein and all documents  related
 * to the source code ("Material") are owned  by  CAPS  entreprise  or  its
 * suppliers or licensors.
 * 
 * Title to the Material remains with CAPS entreprise or its suppliers  and
 * licensors.  The Material contains trade secrets and proprietary and con-
 * fidential information of CAPS entreprise or its suppliers and licensors.
 * 
 * The Material is protected by the French intellectual property code,  in-
 * tellectual property laws and international treaties.  No part of the Ma-
 * terial may be used, copied, reproduced, modified,  published,  uploaded,
 * posted, transmitted, distributed or disclosed in any  way  without  CAPS
 * entreprise's prior express written permission.
 * 
 * No license under any patent, copyright, trade secret or other  intellec-
 * tual property right is granted to or conferred upon you by disclosure or
 * delivery of the Material, either expressly, by implication,  inducement,
 * estoppel or otherwise.
 * 
 * Any license under such intellectual property rights  must  be  expressed
 * and approved by CAPS entreprise in writing.
 */
def(cl_int,           clGetPlatformIDs,        (cl_uint /*num_entries*/, cl_platform_id * /*platforms*/, cl_uint * /*num_platforms*/),
                                                          num_entries  ,                    platforms  ,             num_platforms  )
def(cl_int,           clGetPlatformInfo,       (cl_platform_id /*platform*/, cl_platform_info /*param_name*/, size_t /*param_value_size*/, void * /*param_value*/, size_t * /*param_value_size_ret*/),
                                                                 platform  ,                    param_name  ,          param_value_size  ,          param_value  ,            param_value_size_ret  )
def(cl_context,       clCreateContextFromType, (const cl_context_properties * /*properties*/, cl_device_type /*device_type*/, void (CL_CALLBACK * /*pfn_notify*/)(const char * /*errinfo*/, const void * /*private_info*/, size_t /*cb*/, void * /*user_data*/), void * /*user_data*/, cl_int * /*errcode_ret*/),
                                                                                properties  ,                  device_type  ,                       pfn_notify                                                                                                 ,          user_data  ,            errcode_ret  )
def(cl_int,           clGetDeviceInfo,         (cl_device_id /*device*/, cl_device_info /*param_name*/, size_t /*param_value_size*/, void * /*param_value*/, size_t * /*param_value_size_ret*/),
                                                               device  ,                  param_name  ,          param_value_size  ,          param_value  ,            param_value_size_ret  )
def(cl_int,           clGetContextInfo,        (cl_context /*context*/, cl_context_info /*param_name*/, size_t /*param_value_size*/, void * /*param_value*/, size_t * /*param_value_size_ret*/),
                                                             context  ,                   param_name  ,          param_value_size  ,          param_value  ,            param_value_size_ret  )
def(cl_mem,           clCreateBuffer,          (cl_context /*context*/, cl_mem_flags /*flags*/, size_t /*size*/, void * /*host_ptr*/, cl_int * /*errcode_ret*/),
                                                             context  ,                flags  ,          size  ,          host_ptr  ,            errcode_ret  )

def(void *,           clEnqueueMapBuffer,      (cl_command_queue /*command_queue*/, cl_mem /*buffer*/, cl_bool /*blocking_map*/, cl_map_flags /*map_flags*/, size_t /*offset*/, size_t /*cb*/, cl_uint /*num_events_in_wait_list*/, const cl_event */*event_wait_list*/, cl_event */*event*/, cl_int * /*errcode_ret*/),  
                                                                   command_queue,            buffer,             blocking_map,                  map_flags,            offset,            cb,             num_events_in_wait_list,                     event_wait_list,               event               errcode_ret  )

def(cl_int,           clEnqueueUnmapMemObject, (cl_command_queue /*command_queue*/, cl_mem /*memobj*/, void * /*mapped_ptr*/, cl_uint /*num_events_in_wait_list*/, const cl_event * /*event_wait_list*/, cl_event * /*event*/), 
                                                                   command_queue,            memobj,            mapped_ptr,             num_events_in_wait_list,                      event_wait_list,                event)

def(void *,           clEnqueueCopyBuffer, (cl_command_queue /*command_queue*/, cl_mem /*src_buffer*/, cl_mem /*dst_buffer*/, size_t /*src_offset*/, size_t /*dst_offset*/, size_t /*cb*/, cl_uint /*num_events_in_wait_list*/, const cl_event * /*event_wait_list*/, cl_event * /*event*/), 
                                                               command_queue ,           src_buffer  ,          dst_buffer  ,          src_offset  ,          dst_offset  ,          cb  ,           num_events_in_wait_list  ,                    event_wait_list  ,              event  )


def(cl_int,           clReleaseMemObject,      (cl_mem /*memobj*/),
                                                         memobj  )
def(cl_command_queue, clCreateCommandQueue,    (cl_context /*context*/, cl_device_id /*device*/, cl_command_queue_properties /*properties*/, cl_int * /*errcode_ret*/),
                                                             context  ,                device  ,                               properties  ,            errcode_ret  )
def(cl_int,           clReleaseCommandQueue,   (cl_command_queue /*command_queue*/),
                                                                   command_queue  )
def(cl_int,           clEnqueueWriteBuffer,    (cl_command_queue /*command_queue*/, cl_mem /*buffer*/, cl_bool /*blocking_write*/, size_t /*offset*/, size_t /*cb*/, const void * /*ptr*/, cl_uint /*num_events_in_wait_list*/, const cl_event * /*event_wait_list*/, cl_event * /*event*/),
                                                                   command_queue  ,          buffer  ,           blocking_write  ,          offset  ,          cb  ,                ptr  ,           num_events_in_wait_list  ,                    event_wait_list  ,              event  )
def(cl_int,           clEnqueueReadBuffer,     (cl_command_queue /*command_queue*/, cl_mem /*buffer*/, cl_bool /*blocking_read*/, size_t /*offset*/, size_t /*cb*/, void * /*ptr*/, cl_uint /*num_events_in_wait_list*/, const cl_event * /*event_wait_list*/, cl_event * /*event*/),
                                                                   command_queue  ,          buffer  ,           blocking_read  ,          offset  ,          cb  ,          ptr  ,           num_events_in_wait_list  ,                    event_wait_list  ,              event  )
def(cl_kernel,        clCreateKernel,          (cl_program  /*program*/, const char */*kernel_name*/, cl_int */*errcode_ret*/),
                                                              program  ,               kernel_name  ,           errcode_ret  )
def(cl_int,           clReleaseKernel,         (cl_kernel /*kernel*/),
                                                            kernel  )

def(cl_program,       clCreateProgramWithSource, (cl_context /*context*/, cl_uint /*count*/, const char **/*strings*/, const size_t */*lengths*/, cl_int */*errcode_ret*/),
                                                               context  ,           count  ,                strings  ,                 lengths  ,           errcode_ret  )
def(cl_int,           clBuildProgram,          (cl_program /*program*/, cl_uint /*num_devices*/, const cl_device_id * /*device_list*/, const char * /*options*/, void ( */*pfn_notify*/)(cl_program, void */*user_data*/), void * /*user_data*/),
                                                             program  ,           num_devices  ,                        device_list  ,                options  ,           pfn_notify                                    ,          user_data  )
def(cl_int,           clReleaseProgram,        (cl_program /*program*/),
                                                             program  )
def(cl_int,           clGetProgramBuildInfo,   (cl_program  /*program*/, cl_device_id  /*device*/, cl_program_build_info  /*param_name*/, size_t /*param_value_size*/, void  */*param_value*/, size_t  */*param_value_size_ret*/))
def(cl_int,           clSetKernelArg,          (cl_kernel  /*kernel*/, cl_uint /*arg_index*/, size_t /*arg_size*/, const void * /*arg_value*/),
                                                             kernel  ,           arg_index  ,          arg_size  ,                arg_value  )
def(cl_int,           clEnqueueNDRangeKernel,  (cl_command_queue /*command_queue*/, cl_kernel  /*kernel*/, cl_uint /*work_dim*/, const size_t * /*global_work_offset*/, const size_t * /*global_work_size*/, const size_t * /*local_work_size*/, cl_uint /*num_events_in_wait_list*/, const cl_event * /*event_wait_list*/, cl_event */*event*/),
                                                                   command_queue  ,              kernel  ,           work_dim  ,                  global_work_offset  ,                  global_work_size  ,                  local_work_size  ,           num_events_in_wait_list  ,                    event_wait_list  ,             event  )
def(cl_int,           clReleaseContext,        (cl_context /*context*/),
                                                             context  )
def(cl_int,           clRetainContext,         (cl_context /*context*/),
                                                             context  )
def(cl_int,           clFlush,                 (cl_command_queue /*command_queue*/),
                                                                   command_queue  )

def(cl_int,           clFinish,                (cl_command_queue /*command_queue*/),
                                                                   command_queue  )

def(cl_int,           clEnqueueMarker,         (cl_command_queue /*command_queue*/, cl_event * /*event*/),
                                                                   command_queue  ,              event  )

def(cl_int,       clEnqueueMarkerWithWaitList, (cl_command_queue /*command_queue*/, cl_uint /*num_events_in_wait_list*/, const cl_event * /*event_wait_list*/, cl_event * /*event*/),
                                                                   command_queue  ,           num_events_in_wait_list  ,                    event_wait_list  ,              event  )

def(cl_int,           clWaitForEvents,         (cl_uint /*num_events*/, const cl_event * /*event_list*/),
                                                          num_events  ,                    event_list  )

def(cl_int,           clReleaseEvent,          (cl_event /*event*/),
                                                           event  )
